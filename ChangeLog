CHANGES
=======

0.1.1
-----

* release(0.1.1): manual SIMD on floating point 2x2x1 averaging
* perf: manual SIMD for floating point operations (#2)
* chore: update setup.py to comply with new PyPI rules
* fix: incorrect cast in render\_image
* docs: clarify that countless works best on AVX2
* docs: discuss what downsample\_segmentation actually does
* chore: add GPL v3+ classifier to setup.cfg

0.1.0
-----

* chore: bump version to 0.1.0
* fix: compiler integer comparison warning
* docs: updated performance measures for averaging
* perf: enhancements to uint16, float32, and float64 downsample\_with\_averaging
* perf: ~25% faster downsample with averaging
* docs: add link to article on sparse downsampling
* docs: make sure PyPI License is GPL v3+ (currently None)
* fix: downsample\_with\_striding should support num\_mips
* docs: add installation instructions

0.0.1
-----

* chore: add \_\_version\_\_ = 0.0.1
* docs: add Travis testing badge
* test: add travis CI integration
* test: compare accelerated mode pooling and countless mode pooling
* test: add simple test to compare averaging implementations
* fix: if to elif
* fix: accelerated mode pooling was preempting stippled
* fix: slight discrepency between numpy countless2d and the Cython version
* test: adding automated testing (and solving issues!)
* docs: snarky comment
* docs: developmental PyPI release
* fix: slow path in downsample\_with\_averaging
* feat: workable downsample\_with\_averaging function
* feat: added float, double, uint16 support for accelerated avg pooling
* refactor: made c++ accumulation code more data type flexible
* feat: added 4d support for accelerated 2x2 avg pooling
* refactor: remove unused variables
* feat: accelerated 2x2x1 downsample with averaging working
* Initial commit
